//
//  NewsViewController.swift
//  Clokey
//
//  Created by ÌïúÍ∏àÏ§Ä on 1/8/25.
//

// ÏôÑ

import UIKit
import Then
import SnapKit
import Kingfisher

// NewsViewControllerÎäî Îâ¥Ïä§ ÌôîÎ©¥ÏùÑ ÌëúÏãúÌïòÎäî ViewControllerÎ°ú,
// Ïù¥ÎØ∏ÏßÄ Ïä¨ÎùºÏù¥ÎçîÏôÄ Ï∂îÏ≤ú ÏùòÏÉÅ Î™©Î°ùÏùÑ Ìè¨Ìï®Ìï©ÎãàÎã§.
class NewsViewController: UIViewController {
    
    // ÌéòÏù¥ÏßÄ Î∑∞ Ïª®Ìä∏Î°§Îü¨Î•º ÏÇ¨Ïö©ÌïòÏó¨ Ïä¨ÎùºÏù¥ÎìúÌòï UIÎ•º Íµ¨ÌòÑÌï©ÎãàÎã§.
    private var pageViewController: UIPageViewController!
    
    // MARK: - Properties
    private let newsView = NewsView() // Ïª§Ïä§ÌÖÄ Î∑∞Î•º ÏÇ¨Ïö©ÌïòÏó¨ ÌôîÎ©¥ UIÎ•º Íµ¨ÏÑ±
    
    // Ïù¥ÎØ∏ÏßÄÏôÄ ÌòÑÏû¨ Ïù∏Îç±Ïä§Î•º Í¥ÄÎ¶¨ÌïòÎäî Î∑∞ Î™®Îç∏ Ïó≠Ìï†Ïùò ÎÇ¥Î∂Ä ÌîÑÎ°úÌçºÌã∞
    private var recommandNewsSlides: [RecommandNewsSlideModel] = []
    private var currentIndex: Int = 0 // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏùò Ïù∏Îç±Ïä§
    
    // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÎåÄÏã† Î™®Îç∏ÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§.
//    private let model = NewsImageModel.dummy()
    
    // ÌéòÏù¥ÏßÄ Ïª®Ìä∏Î°§: ÌòÑÏû¨ Ïä¨ÎùºÏù¥Îìú ÏúÑÏπòÎ•º ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú ÌëúÏãú
    private lazy var pageControl: UIPageControl = UIPageControl().then {
        $0.numberOfPages = totalImages() // Ï†ÑÏ≤¥ Ïù¥ÎØ∏ÏßÄ Í∞úÏàò ÏÑ§Ï†ï
        $0.currentPage = currentIndexValue() // ÌòÑÏû¨ ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
        $0.pageIndicatorTintColor = .lightGray // ÎπÑÌôúÏÑ± ÌéòÏù¥ÏßÄ ÏÉâÏÉÅ
        $0.currentPageIndicatorTintColor = .black // ÌôúÏÑ± ÌéòÏù¥ÏßÄ ÏÉâÏÉÅ
        $0.translatesAutoresizingMaskIntoConstraints = false
    }
    
    // MARK: - Lifecycle
    override func loadView() {
        self.view = newsView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        definesPresentationContext = true // ÌòÑÏû¨ Ïª®ÌÖçÏä§Ìä∏ÏóêÏÑú ÏÉàÎ°úÏö¥ Î∑∞ ÌëúÏãú
        
        setupDummyData() // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
        setupPageViewController() // ÌéòÏù¥ÏßÄ Î∑∞ Ïª®Ìä∏Î°§Îü¨ ÏÑ§Ï†ï
        setupPageControl() // ÌéòÏù¥ÏßÄ Ïª®Ìä∏Î°§ ÏÑ§Ï†ï
        
        setupFriendClothesBottomLabelTap()
        setupFollowingCalendarBottomLabelTap()
        
        fetchHotData()
        fetchFriendClothes()
        fetchFriendCalendar()
    }
    
//    private func fetchHotData() {
//        let homeService = HomeService()
//        
//        homeService.fetchGetIssuesData { result in
//            switch result {
//            case .success(let responseDTO):
//                DispatchQueue.main.async {
//                    guard responseDTO.people.count >= 4 else {
//                        print("Not enough people in response: \(responseDTO.people)")
//                        return
//                    }
//                    
//                    self.newsView.hotAccountImageView1.kf.setImage(with: URL(string: responseDTO.people[0].historyImage))
//                    self.newsView.hotAccountProfileIcon1.kf.setImage(with: URL(string: responseDTO.people[0].imageUrl))
//                    self.newsView.hotAccountProfileName1.text = responseDTO.people[0].clokeyId
//                    
//                    self.newsView.hotAccountImageView2.kf.setImage(with: URL(string: responseDTO.people[1].historyImage))
//                    self.newsView.hotAccountProfileIcon2.kf.setImage(with: URL(string: responseDTO.people[1].imageUrl))
//                    self.newsView.hotAccountProfileName2.text = responseDTO.people[1].clokeyId
//                    
//                    self.newsView.hotAccountImageView3.kf.setImage(with: URL(string: responseDTO.people[2].historyImage))
//                    self.newsView.hotAccountProfileIcon3.kf.setImage(with: URL(string: responseDTO.people[2].imageUrl))
//                    self.newsView.hotAccountProfileName3.text = responseDTO.people[2].clokeyId
//                    
//                    self.newsView.hotAccountImageView4.kf.setImage(with: URL(string: responseDTO.people[3].historyImage))
//                    self.newsView.hotAccountProfileIcon4.kf.setImage(with: URL(string: responseDTO.people[3].imageUrl))
//                    self.newsView.hotAccountProfileName4.text = responseDTO.people[3].clokeyId
//                    
//                    // ‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÌõÑ `pageControl` ÏóÖÎç∞Ïù¥Ìä∏
//                    self.setupPageControl()
//                }
//                
//            case .failure(let error):
//                print("Failed to fetch hot data: \(error.localizedDescription)")
//            }
//        }
//    }
    
    private func fetchHotData() {
        let homeService = HomeService()
        
        homeService.fetchGetIssuesData { result in
            switch result {
            case .success(let responseDTO):
                DispatchQueue.main.async {
                    guard responseDTO.people.innerResult.count >= 4 else {
                        print("Not enough people in response: \(responseDTO.people.innerResult)")
                        return
                    }
                    
                    self.newsView.hotAccountImageView1.kf.setImage(with: URL(string: responseDTO.people.innerResult[0].historyImage))
                    self.newsView.hotAccountProfileIcon1.kf.setImage(with: URL(string: responseDTO.people.innerResult[0].imageUrl))
                    self.newsView.hotAccountProfileName1.text = responseDTO.people.innerResult[0].clokeyId
                    
                    self.newsView.hotAccountImageView2.kf.setImage(with: URL(string: responseDTO.people.innerResult[1].historyImage))
                    self.newsView.hotAccountProfileIcon2.kf.setImage(with: URL(string: responseDTO.people.innerResult[1].imageUrl))
                    self.newsView.hotAccountProfileName2.text = responseDTO.people.innerResult[1].clokeyId
                    
                    self.newsView.hotAccountImageView3.kf.setImage(with: URL(string: responseDTO.people.innerResult[2].historyImage))
                    self.newsView.hotAccountProfileIcon3.kf.setImage(with: URL(string: responseDTO.people.innerResult[2].imageUrl))
                    self.newsView.hotAccountProfileName3.text = responseDTO.people.innerResult[2].clokeyId
                    
                    self.newsView.hotAccountImageView4.kf.setImage(with: URL(string: responseDTO.people.innerResult[3].historyImage))
                    self.newsView.hotAccountProfileIcon4.kf.setImage(with: URL(string: responseDTO.people.innerResult[3].imageUrl))
                    self.newsView.hotAccountProfileName4.text = responseDTO.people.innerResult[3].clokeyId
                    
                    // ‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÌõÑ `pageControl` ÏóÖÎç∞Ïù¥Ìä∏
                    self.setupPageControl()
                }
                
            case .failure(let error):
                print("Failed to fetch hot data: \(error.localizedDescription)")
            }
        }
    }
    
    
//    func fetchFriendClothes() {
//        let homeService = HomeService()
//        
//        homeService.fetchGetIssuesData { result in
//            switch result {
//            case .success(let responseDTO):
//                DispatchQueue.main.async {
//                    let closetItems = responseDTO.closet
//                    
//                    let isEmpty = closetItems.isEmpty
//                    self.newsView.updateFriendClothesEmptyState(isEmpty: isEmpty)
//                    
//                    if let firstProfileImageUrl = closetItems.first?.profileImage {
//                        self.newsView.profileImageView.kf.setImage(with: URL(string: firstProfileImageUrl))
//                    }
//                    if let firstClosetItem = closetItems.first {
//                        self.newsView.usernameLabel.text = firstClosetItem.clokeyId
//                        self.newsView.dateLabel.text = self.formatDate(firstClosetItem.date)
//                    }
//                    
//                    if isEmpty {
//                        print("üö® Closet Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
//                        return
//                    }
//                    
//                    // ‚úÖ ÏµúÏÜå 3Í∞úÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨ ÌõÑ Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
//                    if closetItems.count >= 3 {
//                        self.newsView.friendClothesImageView1.kf.setImage(with: URL(string: closetItems[0].images.first ?? ""))
//                        self.newsView.friendClothesImageView2.kf.setImage(with: URL(string: closetItems[1].images.first ?? ""))
//                        self.newsView.friendClothesImageView3.kf.setImage(with: URL(string: closetItems[2].images.first ?? ""))
//                    } else {
//                        print("Closet Îç∞Ïù¥ÌÑ∞Í∞Ä 3Í∞ú ÎØ∏ÎßåÏûÖÎãàÎã§. \(closetItems.count)Í∞úÎßå Ï°¥Ïû¨.")
//                    }
//                }
//                
//            case .failure(let error):
//                print("Failed to fetch friend clothes data: \(error.localizedDescription)")
//                DispatchQueue.main.async {
//                    self.newsView.updateFriendClothesEmptyState(isEmpty: true)
//                }
//            }
//        }
//    }
    
    func fetchFriendClothes() {
        let homeService = HomeService()
        
        homeService.fetchGetIssuesData { result in
            switch result {
            case .success(let responseDTO):
                DispatchQueue.main.async {
                    let closetItems = responseDTO.closet.innerResult // ‚úÖ Î≥ÄÍ≤ΩÎêú Íµ¨Ï°∞ Î∞òÏòÅ
                    
                    let isEmpty = closetItems.isEmpty
                    self.newsView.updateFriendClothesEmptyState(isEmpty: isEmpty)
                    
                    if let firstProfileImageUrl = closetItems.first?.profileImage {
                        self.newsView.profileImageView.kf.setImage(with: URL(string: firstProfileImageUrl))
                    }
                    if let firstClosetItem = closetItems.first {
                        self.newsView.usernameLabel.text = firstClosetItem.clokeyId
                        self.newsView.dateLabel.text = self.formatDate(firstClosetItem.date)
                    }
                    
                    if isEmpty {
                        print("üö® Closet Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
                        return
                    }
                    
                    // ‚úÖ ÏµúÏÜå 3Í∞úÏùò Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨ ÌõÑ Ïù¥ÎØ∏ÏßÄ ÏÑ§Ï†ï
                    if closetItems.count >= 3 {
                        self.newsView.friendClothesImageView1.kf.setImage(with: URL(string: closetItems[0].images.first ?? ""))
                        self.newsView.friendClothesImageView2.kf.setImage(with: URL(string: closetItems[1].images.first ?? ""))
                        self.newsView.friendClothesImageView3.kf.setImage(with: URL(string: closetItems[2].images.first ?? ""))
                    } else {
                        print("Closet Îç∞Ïù¥ÌÑ∞Í∞Ä 3Í∞ú ÎØ∏ÎßåÏûÖÎãàÎã§. \(closetItems.count)Í∞úÎßå Ï°¥Ïû¨.")
                    }
                }
                
            case .failure(let error):
                print("Failed to fetch friend clothes data: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    self.newsView.updateFriendClothesEmptyState(isEmpty: true)
                }
            }
        }
    }
    
    private func formatDate(_ dateString: String) -> String {
        let inputFormatter = DateFormatter()
        inputFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss" // Í∏∞Ï°¥ API ÌòïÏãù
        inputFormatter.locale = Locale(identifier: "ko_KR") // ÌïúÍµ≠ ÏãúÍ∞Ñ ÏÑ§Ï†ï
        
        if let date = inputFormatter.date(from: dateString) {
            let outputFormatter = DateFormatter()
            outputFormatter.dateFormat = "yyyy-MM-dd" // ÏõêÌïòÎäî ÌòïÏãù
            return outputFormatter.string(from: date)
        }
        
        return dateString // Î≥ÄÌôò Ïã§Ìå® Ïãú ÏõêÎ≥∏ Î∞òÌôò
    }
    
//    func fetchFriendCalendar() {
//        let homeService = HomeService()
//        
//        homeService.fetchGetIssuesData { result in
//            switch result {
//            case .success(let responseDTO):
//                DispatchQueue.main.async {
//                    let calendarItems = responseDTO.calendar
//                    
//                    // ‚úÖ Calendar Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ ÌõÑ EmptyState ÏÑ§Ï†ï
//                    let isEmpty = calendarItems.isEmpty
//                    self.newsView.updateFriendCalendarEmptyState(isEmpty: isEmpty)
//                    
//                    
//                    if isEmpty {
//                        print("üö® Calendar Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
//                        return
//                    }
//
//                    if let firstCalendarItem = calendarItems.first {
//                        if let firstImageUrl = firstCalendarItem.events.first?.imageUrl {
//                            self.newsView.followingCalendarUpdateImageView1.kf.setImage(with: URL(string: firstImageUrl))
//                        }
//                        self.newsView.followingCalendarUpdateSubTitle.text = self.formatDate(firstCalendarItem.date)
//                        
//                        self.newsView.followingCalendarProfileIcon1.kf.setImage(with: URL(string: firstCalendarItem.profileImage))
//                        self.newsView.followingCalendarProfileName1.text = firstCalendarItem.clokeyId
//                    }
//                    
//                    
//                    if calendarItems.count > 1, let secondImageUrl = calendarItems[1].events.first?.imageUrl {
//                        self.newsView.followingCalendarUpdateImageView2.kf.setImage(with: URL(string: secondImageUrl))
//                        self.newsView.followingCalendarProfileIcon2.kf.setImage(with: URL(string: calendarItems[1].profileImage))
//                        self.newsView.followingCalendarProfileName2.text = calendarItems[1].clokeyId
//                    }
//                    
//                }
//                
//            case .failure(let error):
//                print("Failed to fetch calendar data: \(error.localizedDescription)")
//                DispatchQueue.main.async {
//                    self.newsView.updateFriendCalendarEmptyState(isEmpty: true)
//                }
//            }
//        }
//    }
    
    func fetchFriendCalendar() {
        let homeService = HomeService()
        
        homeService.fetchGetIssuesData { result in
            switch result {
            case .success(let responseDTO):
                DispatchQueue.main.async {
                    let calendarItems = responseDTO.calendar.innerResult // ‚úÖ Î≥ÄÍ≤ΩÎêú Íµ¨Ï°∞ Î∞òÏòÅ
                    
                    // ‚úÖ Calendar Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ ÌõÑ EmptyState ÏÑ§Ï†ï
                    let isEmpty = calendarItems.isEmpty
                    self.newsView.updateFriendCalendarEmptyState(isEmpty: isEmpty)
                    
                    if isEmpty {
                        print("üö® Calendar Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
                        return
                    }

                    if let firstCalendarItem = calendarItems.first {
                        if let firstImageUrl = firstCalendarItem.events.first?.imageUrl {
                            self.newsView.followingCalendarUpdateImageView1.kf.setImage(with: URL(string: firstImageUrl))
                        }
                        self.newsView.followingCalendarUpdateSubTitle.text = self.formatDate(firstCalendarItem.date)
                        
                        self.newsView.followingCalendarProfileIcon1.kf.setImage(with: URL(string: firstCalendarItem.profileImage))
                        self.newsView.followingCalendarProfileName1.text = firstCalendarItem.clokeyId
                    }
                    
                    if calendarItems.count > 1, let secondImageUrl = calendarItems[1].events.first?.imageUrl {
                        self.newsView.followingCalendarUpdateImageView2.kf.setImage(with: URL(string: secondImageUrl))
                        self.newsView.followingCalendarProfileIcon2.kf.setImage(with: URL(string: calendarItems[1].profileImage))
                        self.newsView.followingCalendarProfileName2.text = calendarItems[1].clokeyId
                    }
                }
                
            case .failure(let error):
                print("Failed to fetch calendar data: \(error.localizedDescription)")
                DispatchQueue.main.async {
                    self.newsView.updateFriendCalendarEmptyState(isEmpty: true)
                }
            }
        }
    }
    
    
//    private func setupDummyData() {
//        recommandNewsSlides = RecommandNewsSlideModel.slideDummyData()
//        
//    }
    
//    private func setupDummyData() {
//        let homeService = HomeService()
//
//        homeService.fetchGetIssuesData { result in
//            switch result {
//            case .success(let responseDTO):
//                DispatchQueue.main.async {
//                    // ‚úÖ recommend Î∞∞Ïó¥Ïù¥ ÎπÑÏñ¥ÏûàÎäîÏßÄ ÌôïÏù∏
//                    guard !responseDTO.recommend.isEmpty else {
//                        print("üö® No recommend data available.")
//                        return
//                    }
//
//                    // ‚úÖ ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞Î•º recommandNewsSlides Î∞∞Ïó¥Ïóê Ï†ÄÏû•
//                    self.recommandNewsSlides = responseDTO.recommend.map { recommendItem in
//                        return RecommandNewsSlideModel(
//                            image: recommendItem.imageUrl,
//                            title: recommendItem.subTitle ?? "Ï†úÎ™© ÏóÜÏùå",
//                            hashtag: recommendItem.hashtag ?? "#Ìï¥ÏãúÌÉúÍ∑∏ ÏóÜÏùå",
//                            date: recommendItem.date
//                        )
//                    }
//
//                    // ‚úÖ Ï≤´ Î≤àÏß∏ Ïä¨ÎùºÏù¥ÎìúÎ•º ÏÑ§Ï†ïÌïòÏó¨ pageViewControllerÏóê Î∞òÏòÅ
//                    if let initialVC = self.createImageViewController(for: self.currentIndexValue()) {
//                        self.pageViewController.setViewControllers([initialVC], direction: .forward, animated: false, completion: nil)
//                    }
//
//                    // ‚úÖ ÌéòÏù¥ÏßÄ Ïª®Ìä∏Î°§ UI ÏóÖÎç∞Ïù¥Ìä∏
//                    self.setupPageControl()
//
//                    print("‚úÖ recommandNewsSlides ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: \(self.recommandNewsSlides.count)Í∞ú")
//                }
//                
//            case .failure(let error):
//                print("‚ùå Failed to load recommend data: \(error.localizedDescription)")
//            }
//        }
//    }
    
    private func setupDummyData() {
        let homeService = HomeService()

        homeService.fetchGetIssuesData { result in
            switch result {
            case .success(let responseDTO):
                DispatchQueue.main.async {
                    // ‚úÖ recommend.innerResult Î∞∞Ïó¥Ïù¥ ÎπÑÏñ¥ÏûàÎäîÏßÄ ÌôïÏù∏
                    guard !responseDTO.recommend.innerResult.isEmpty else {
                        print("üö® No recommend data available.")
                        return
                    }

                    // ‚úÖ ÏÑúÎ≤ÑÏóêÏÑú Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞Î•º recommandNewsSlides Î∞∞Ïó¥Ïóê Ï†ÄÏû•
                    self.recommandNewsSlides = responseDTO.recommend.innerResult.map { recommendItem in
                        return RecommandNewsSlideModel(
                            image: recommendItem.imageUrl,
                            title: recommendItem.subTitle,
                            hashtag: recommendItem.hashtag,
                            date: recommendItem.date
                        )
                    }

                    // ‚úÖ Ï≤´ Î≤àÏß∏ Ïä¨ÎùºÏù¥ÎìúÎ•º ÏÑ§Ï†ïÌïòÏó¨ pageViewControllerÏóê Î∞òÏòÅ
                    if let initialVC = self.createImageViewController(for: self.currentIndexValue()) {
                        self.pageViewController.setViewControllers([initialVC], direction: .forward, animated: false, completion: nil)
                    }

                    // ‚úÖ ÌéòÏù¥ÏßÄ Ïª®Ìä∏Î°§ UI ÏóÖÎç∞Ïù¥Ìä∏
                    self.setupPageControl()

                    print("‚úÖ recommandNewsSlides ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: \(self.recommandNewsSlides.count)Í∞ú")
                }
                
            case .failure(let error):
                print("‚ùå Failed to load recommend data: \(error.localizedDescription)")
            }
        }
    }
    
    // MARK: - Helper Methods
    // Ï†ÑÏ≤¥ Ïù¥ÎØ∏ÏßÄ Í∞úÏàòÎ•º Î∞òÌôòÌï©ÎãàÎã§.
    private func totalImages() -> Int {
        return recommandNewsSlides.count
    }
    
    // Ï£ºÏñ¥ÏßÑ Ïù∏Îç±Ïä§Ïóê Ìï¥ÎãπÌïòÎäî Ïä¨ÎùºÏù¥Îìú Îç∞Ïù¥ÌÑ∞Î•º Î∞òÌôòÌï©ÎãàÎã§.
    private func image(at index: Int) -> RecommandNewsSlideModel? {
        guard index >= 0 && index < recommandNewsSlides.count else { return nil }
        return recommandNewsSlides[index]
    }
    
    // Ï£ºÏñ¥ÏßÑ Ïù¥Î¶ÑÏùò Ïä¨ÎùºÏù¥Îìú Ïù∏Îç±Ïä§Î•º Î∞òÌôòÌï©ÎãàÎã§.
    private func imageIndex(of name: String) -> Int? {
        return recommandNewsSlides.firstIndex { $0.image == name }
    }
    
    // ÌòÑÏû¨ Ïù∏Îç±Ïä§Î•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
    private func updateCurrentIndex(to index: Int) {
        currentIndex = index
    }
    
    // ÌòÑÏû¨ Ïù∏Îç±Ïä§Î•º Î∞òÌôòÌï©ÎãàÎã§.
    func currentIndexValue() -> Int {
        return currentIndex
    }
    
    // MARK: - Page View Controller Setup
    private func setupPageViewController() {
        // ÌéòÏù¥ÏßÄ Î∑∞ Ïª®Ìä∏Î°§Îü¨ Ï¥àÍ∏∞Ìôî Î∞è Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§ÏôÄ Îç∏Î¶¨Í≤åÏù¥Ìä∏ ÏÑ§Ï†ï
        pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)
        pageViewController.dataSource = self
        pageViewController.delegate = self
        
        // Ï¥àÍ∏∞ Ïä¨ÎùºÏù¥Îìú ÏÑ§Ï†ï
        if let initialVC = createImageViewController(for: currentIndexValue()) {
            pageViewController.setViewControllers([initialVC], direction: .forward, animated: true, completion: nil)
        }
        
        // ÌéòÏù¥ÏßÄ Î∑∞ Ïª®Ìä∏Î°§Îü¨Î•º ÏûêÏãù Î∑∞ Ïª®Ìä∏Î°§Îü¨Î°ú Ï∂îÍ∞Ä
        addChild(pageViewController)
        newsView.contentView.addSubview(pageViewController.view)
        pageViewController.didMove(toParent: self)
        
        // SnapKitÏúºÎ°ú Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï
        pageViewController.view.snp.makeConstraints { make in
            make.top.equalTo(newsView.recommandTitle.snp.bottom).offset(20)
            make.leading.trailing.equalToSuperview().inset(20)
            make.height.equalTo(300) // Ïä¨ÎùºÏù¥Îìú ÎÜíÏù¥ ÏÑ§Ï†ï
        }
    }
    
    private func setupPageControl() {
        // ÌéòÏù¥ÏßÄ Ïª®Ìä∏Î°§ Ï∂îÍ∞Ä Î∞è ÏÑ§Ï†ï
        newsView.contentView.addSubview(pageControl)
//        pageControl.numberOfPages = totalImages() // Ïù¥ÎØ∏ÏßÄ Í∞úÏàò ÏÑ§Ï†ï
        pageControl.numberOfPages = recommandNewsSlides.count
        pageControl.currentPage = currentIndexValue()
        
        // SnapKitÏúºÎ°ú Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï
        pageControl.snp.makeConstraints { make in
            make.top.equalTo(newsView.slideContainerView.snp.bottom).offset(10)
            make.centerX.equalToSuperview()
        }
    }
    

    private func createImageViewController(for index: Int) -> ImageViewController? {
        guard index >= 0 && index < recommandNewsSlides.count else { return nil }
        
        let imageVC = ImageViewController()
        let slideModel = recommandNewsSlides[index]
        
        imageVC.configureView(with: slideModel) // ‚úÖ Ï†ïÌôïÌïú Îç∞Ïù¥ÌÑ∞ Ï†ÑÎã¨
        imageVC.slideModel = slideModel // ‚úÖ ÏßÅÏ†ë slideModel Ï†ÄÏû• (Ï∂îÍ∞Ä)
        
        return imageVC
    }
    
    private func setupFriendClothesBottomLabelTap() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleFriendClothesBottomLabelTap))
        newsView.friendClothesBottomButtonLabel.isUserInteractionEnabled = true
        newsView.friendClothesBottomButtonLabel.addGestureRecognizer(tapGesture)
    }
    
    @objc private func handleFriendClothesBottomLabelTap() {
        let detailVC = UpdateFriendClothesViewController()
        self.navigationController?.pushViewController(detailVC, animated: true)
    }
    
    // MARK: - bottomLabelÏóê TapGestureRecognizer Ï∂îÍ∞Ä
    private func setupFollowingCalendarBottomLabelTap() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleFollowingCalendarBottomLabelTap))
        newsView.followingCalendarBottomButtonLabel.isUserInteractionEnabled = true
        newsView.followingCalendarBottomButtonLabel.addGestureRecognizer(tapGesture)
    }
    
    @objc private func handleFollowingCalendarBottomLabelTap() {
        let presentedVC = UpdateFriendCalendarViewController()
        self.navigationController?.pushViewController(presentedVC, animated: true)
    }
}

extension NewsViewController: UIPageViewControllerDataSource {
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        guard let currentVC = viewController as? ImageViewController,
              let currentSlide = currentVC.slideModel, // `slideModel` ÏÇ¨Ïö©
              let currentIndex = recommandNewsSlides.firstIndex(where: { $0.title == currentSlide.title }) else {
            return nil
        }
        
        let previousIndex = currentIndex - 1
        guard previousIndex >= 0 else { return nil }
        return createImageViewController(for: previousIndex)
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
        guard let currentVC = viewController as? ImageViewController,
              let currentSlide = currentVC.slideModel, // `slideModel` ÏÇ¨Ïö©
              let currentIndex = recommandNewsSlides.firstIndex(where: { $0.title == currentSlide.title }) else {
            return nil
        }
        
        let nextIndex = currentIndex + 1
        guard nextIndex < recommandNewsSlides.count else { return nil }
        return createImageViewController(for: nextIndex)
    }
}


extension NewsViewController: UIPageViewControllerDelegate {
    func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) {
        guard completed,
              let currentVC = pageViewController.viewControllers?.first as? ImageViewController,
              let currentSlide = currentVC.slideModel, // `slideModel` ÏÇ¨Ïö©
              let index = recommandNewsSlides.firstIndex(where: { $0.title == currentSlide.title }) else {
            return
        }
        
        self.currentIndex = index
        pageControl.currentPage = index // ÌéòÏù¥ÏßÄ Ïª®Ìä∏Î°§ ÏóÖÎç∞Ïù¥Ìä∏
    }
}



